[{"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\index.js":"1","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\App.js":"2","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\reportWebVitals.js":"3","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Stencil\\index.js":"4","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Services\\country.js":"5","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\HomePage\\index.js":"6","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\InfoPage\\index.js":"7","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ContactMe\\index.js":"8","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ShapesInfo\\index.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":228,"mtime":1614902880500,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":12766,"mtime":1615149574866,"results":"14","hashOfConfig":"11"},{"size":208,"mtime":1612990978196,"results":"15","hashOfConfig":"11"},{"size":2006,"mtime":1615152010359,"results":"16","hashOfConfig":"11"},{"size":12157,"mtime":1615172259521,"results":"17","hashOfConfig":"11"},{"size":2042,"mtime":1614902880560,"results":"18","hashOfConfig":"11"},{"size":9928,"mtime":1615078623394,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1egte4n",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\index.js",[],["43","44"],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\App.js",[],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\reportWebVitals.js",[],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Stencil\\index.js",["45","46","47","48","49","50","51","52","53","54","55","56","57","58"],"import React, { useState, useEffect } from \"react\";\r\nimport { getCountryData } from \"../Services/country\";\r\nimport ShapesInfo from \"../ShapesInfo\";\r\n\r\n//import assets\r\nimport { mdiChevronDown, mdiChevronUp } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport { Stage, Layer, Star, Rect, Circle, RegularPolygon, Text } from \"react-konva\";\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst Stencil = () => {\r\n    const countries = [\"Finland\", \"Denmark\", \"Switzerland\",\r\n        \"Iceland\",\"Norway\",\"Netherlands\",\"Sweden\",\"New Zealand\",\"Austria\",\"Luxembourg\",\"Canada\",\"Australia\",\"United Kingdom\",\"Israel\",\"Costa Rica\",\"Ireland\",\"Germany\",\"United States\",\"Czech Republic\",\"Belgium\",\r\n        \"United Arab Emirates\",\"Malta\",\"France\",\"Mexico\",\"Taiwan Province of China\",\"Uruguay\",\"Saudi Arabia\",\"Spain\",\"Guatemala\",\"Italy\",\"Singapore\",\"Brazil\",\"Slovenia\",\"El Salvador\",\"Kosovo\",\"Panama\",\"Slovakia\",\"Uzbekistan\",\"Chile\",\"Bahrain\",\"Lithuania\",\r\n        \"Trinidad and Tobago\",\"Poland\",\"Colombia\",\"Cyprus\",\"Nicaragua\",\"Romania\",\"Kuwait\",\"Mauritius\",\"Kazakhstan\",\"Estonia\",\"Philippines\",\"Hungary\",\"Thailand\",\"Argentina\",\"Honduras\",\"Latvia\",\"Ecuador\",\"Portugal\",\"Jamaica\",\"South Korea\", \"Japan\",\"Peru\",\"Serbia\",\r\n        \"Bolivia\",\"Pakistan\",\"Paraguay\",\"Dominican Republic\",\"Bosnia and Herzegovina\",\"Moldova\",\"Tajikistan\",\"Montenegro\",\"Russia\",\"Kyrgyzstan\",\"Belarus\",\"North Cyprus\",\"Greece\",\"Hong Kong S.A.R. of China\",\"Croatia\",\"Libya\",\"Mongolia\",\"Malaysia\",\"Vietnam\",\"Indonesia\",\"Ivory Coast\",\"Benin\",\"Maldives\",\"Congo (Brazzaville)\",\r\n        \"Azerbaijan\",\"Macedonia\",\"Ghana\",\"Nepal\",\"Turkey\",\"China\",\"Turkmenistan\",\"Bulgaria\",\"Morocco\",\"Cameroon\",\"Venezuela\",\"Algeria\",\"Senegal\",\"Guinea\",\"Niger\",\"Laos\",\"Albania\",\r\n        \"Cambodia\",\"Bangladesh\",\"Gabon\",\"South Africa\",\"Iraq\",\"Lebanon\",\"Burkina Faso\",\"Gambia\",\"Mali\",\"Nigeria\",\"Armenia\",\"Georgia\",\"Iran\",\"Jordan\",\"Mozambique\",\"Kenya\",\"Namibia\",\"Ukraine\",\"Liberia\",\"Palestinian Territories\",\"Uganda\",\"Chad\",\"Tunisia\",\"Mauritania\",\r\n        \"Sri Lanka\",\"Congo (Kinshasa)\",\"Swaziland\",\"Myanmar\",\"Comoros\",\"Togo\",\"Ethiopia\",\"Madagascar\",\"Egypt\",\"Sierra Leone\",\"Burundi\",\r\n        \"Zambia\",\"Haiti\",\"Lesotho\",\"India\",\"Malawi\",\"Yemen\",\"Botswana\",\"Tanzania\",\"Central African Republic\",\"Rwanda\",\"Zimbabwe\",\"South Sudan\",\"Afghanistan\"\r\n        ]\r\n    \r\n    const [country, setCountry] = useState('Select a country');\r\n    const [display, setListDisplay] = useState(false);\r\n    const [countryData, setCountryData] = useState({\"Rank\":{\"data\":1},\"CountryName\":{\"data\":\"Finland\"},\"Region\":{\"data\":\"Western Europe\"},\"Score\":{\"data\":7.808700085},\"Gdp_Per_Capita\":{\"data\":10.63926697},\"Soc_Support\":{\"data\":0.954329729},\"Health_life_expectancy\":{\"data\":71.9008255},\"Freedom_of_choice\":{\"data\":0.949172199},\"Generosity\":{\"data\":-0.059482019},\"Percept_of_corrupt\":{\"data\":0.195444584}});\r\n    \r\n    //shapes state\r\n    const [squarePos, setSqPosition] = useState({x: 45, y:90})\r\n    const [circlePos, setCircPosition] = useState({x: 225, y:110})\r\n    const [starPos, setStarPosition] = useState({x: 375, y:120})\r\n    const [rectanglePos, setRectPosition] = useState({x: 475, y:90})\r\n    const [trianglePos, setTriPosition] = useState({x: 690, y:130})\r\n    const [pentagonPos, setPentPosition] = useState({x: 825, y:130})\r\n\r\n\r\n    //stencil sizes and position\r\n    var finland = {\"Rank\":{\"data\":1},\"CountryName\":{\"data\":\"Finland\"},\"Region\":{\"data\":\"Western Europe\"},\"Score\":{\"data\":7.808700085},\"Gdp_Per_Capita\":{\"data\":10.63926697},\"Soc_Support\":{\"data\":0.954329729},\"Health_life_expectancy\":{\"data\":71.9008255},\"Freedom_of_choice\":{\"data\":0.949172199},\"Generosity\":{\"data\":-0.059482019},\"Percept_of_corrupt\":{\"data\":0.195444584}}\r\n    var sqStencil = {x:30, y:120}\r\n    var circStencil = {x:400, y:150}\r\n    var starStencil = {x:800, y:150}\r\n    var rectStencil = {x:30, y:330}\r\n    var triStencil = {x:400, y:380}\r\n    var pentStencil = {x:800, y:360}\r\n    \r\n    \r\n    function toggleList(){\r\n        setListDisplay(!display);\r\n    }    \r\n\r\n    function changeCountry(e){\r\n        setCountry(e.target.innerHTML);\r\n        setListDisplay(!display);\r\n        console.log(e.target.innerHTML);\r\n    }\r\n\r\n    function checkIntersection(e){\r\n        console.log(\"checking intersection\");\r\n        var shape = e.target.attrs;\r\n        var layerX = 45\r\n        var layerY = 150\r\n        if(shape.id == 1){\r\n            console.log(\"shape: square\");\r\n            if(shape.x <= 280 && shape.x >= 10 && shape.y <= 350 && shape.y >= 200){\r\n                console.log(\"collision course!\");\r\n                setSqPosition({x:sqStencil.x + layerX, y:sqStencil.y + layerY});\r\n            }else{\r\n                setSqPosition({x: 45, y:90});\r\n            }\r\n        }\r\n        else if(shape.id == 2){\r\n            console.log(\"shape: circle\");\r\n            if(shape.x <= 545 && shape.x >= 350 && shape.y <= 380 && shape.y >= 220){\r\n                console.log(\"collision course!\");\r\n                setCircPosition({x:circStencil.x + layerX, y:circStencil.y + layerY});\r\n            }else{\r\n                setCircPosition({x: 225, y:110});\r\n            }\r\n        }\r\n        else if(shape.id == 3){\r\n            console.log(\"shape: star\");\r\n            if(shape.x <= 900 && shape.x >= 780 && shape.y <= 360 && shape.y >= 190){\r\n                console.log(\"collision course!\");\r\n                setStarPosition({x:starStencil.x + layerX, y:starStencil.y + layerY});\r\n            }else{\r\n                setStarPosition({x: 375, y:120});\r\n            }\r\n        }\r\n        else if(shape.id == 4){\r\n            console.log(\"shape: Rectangle\");\r\n            if(shape.x <= 150 && shape.x >= 0 && shape.y <= 540 && shape.y >= 420){\r\n                console.log(\"collision course!\");\r\n                setRectPosition({x:rectStencil.x + layerX, y:rectStencil.y + layerY});\r\n            }else{\r\n                setRectPosition({x: 475, y:90});\r\n            }\r\n        }\r\n        else if(shape.id == 5){\r\n            console.log(\"shape: Triangle\");\r\n            if(shape.x <= 490 && shape.x >= 400 && shape.y <= 590 && shape.y >= 480){\r\n                console.log(\"collision course!\");\r\n                setTriPosition({x:triStencil.x + layerX, y:triStencil.y + layerY});\r\n            }else{\r\n                setTriPosition({x: 690, y:130});\r\n            }\r\n        }\r\n        else if(shape.id == 6){\r\n            console.log(\"shape: Pentagon\");\r\n            if(shape.x <= 900 && shape.x >= 800 && shape.y <= 580 && shape.y >= 460){\r\n                console.log(\"collision course!\");\r\n                setPentPosition({x:pentStencil.x + layerX, y:pentStencil.y + layerY});\r\n            }else{\r\n                setPentPosition({x: 825, y:130});\r\n            }\r\n        }\r\n    }\r\n\r\n    function displayCord(e){\r\n        var shape = e.target.attrs;\r\n        if(shape.id == 1){\r\n            setSqPosition({x:0, y:0});\r\n        }else if(shape.id == 2){\r\n            setCircPosition({x:0, y:0});\r\n        }else if(shape.id == 3){\r\n            setStarPosition({x:0, y:0});\r\n        }else if(shape.id == 4){\r\n            setRectPosition({x:0, y:0});\r\n        }else if(shape.id == 5){\r\n            setTriPosition({x:0, y:0});\r\n        }else if(shape.id == 6){\r\n            setPentPosition({x:0, y:0});\r\n        }\r\n        console.log(`X: ${Math.round(e.target.attrs.x)} Y: ${Math.round(e.target.attrs.y)}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n         // GET request using fetch inside useEffect React hook\r\n         console.log(country)\r\n         console.log(\"Country data change in effect..\")\r\n\r\n         if(country != \"Select a country\"){\r\n            let mounted = true;\r\n            getCountryData(country)\r\n            .then(data => {\r\n                if(mounted) {\r\n                    setCountryData(data)\r\n                    setSqPosition({x:45, y:90});\r\n                    setCircPosition({x: 225, y:110});\r\n                    setStarPosition({x: 375, y:120});\r\n                    setRectPosition({x: 475, y:90});\r\n                    setTriPosition({x: 690, y:130});\r\n                    setPentPosition({x: 825, y:130});\r\n                }\r\n            })\r\n            if(countryData != null){\r\n                console.log(countryData)\r\n            }\r\n            return () => mounted = false;\r\n        }\r\n\r\n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\r\n    }, [country]);\r\n    \r\n    return (\r\n        <div className={styles.mainArea}>\r\n           <div className={styles.infoDivs}> \r\n                <div className={styles.dropDown}>\r\n                    <button className={styles.dropDownBtn} onClick={toggleList}>{country} {display ? <Icon path={mdiChevronUp} size=\"35px\" className={styles.selectIcon}/> : <Icon path={mdiChevronDown} size=\"35px\" className={styles.selectIcon}/>}</button>\r\n                    <div className={styles.dropDownContent} style={{ display: display ? \"flex\" : \"none\" }}>\r\n                        <ul>\r\n                            {countries.map((item)=>\r\n                                <li className={styles.countryLabel} onClick={changeCountry}>{item}</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <ShapesInfo />\r\n            </div>\r\n            <div className={styles.shapeStage}>\r\n                <Stage width={1000} height={700} margin={50}>\r\n                    <Layer className={styles.shapeLayer}>\r\n                        <Text x={45} y={20} fontSize={26} fill=\"#006990\" fontFamily=\"Sniglet, cursive\" text={`${countryData.CountryName.data}'s Shapes`} />\r\n                        <Rect x={squarePos.x} y={squarePos.y} width={(100*(countryData.Gdp_Per_Capita.data/9.295706))/2} height={(100*(countryData.Gdp_Per_Capita.data/9.295706))/2} id=\"1\" fill=\"#D7DF21\" draggable onDragMove={displayCord} onDragEnd={checkIntersection}/>\r\n                        <Circle x={circlePos.x} y={circlePos.y} radius={(100*(countryData.Freedom_of_choice.data/0.78336))/2} id=\"2\" fill=\"#006990\" draggable onDragMove={displayCord} onDragEnd={checkIntersection}/>\r\n                        <Star x={starPos.x} y={starPos.y} numPoints={5} innerRadius={Math.min(20,10+(100*(countryData.Soc_Support.data/0.808721))/2)} outerRadius={10+(100*(countryData.Soc_Support.data/0.808721))/2} rotation={70} id=\"3\" fill=\"#FFB61B\" draggable onDragMove={displayCord} onDragEnd={checkIntersection}/>\r\n                        <Rect x={rectanglePos.x} y={rectanglePos.y} width={25+(100*(countryData.Health_life_expectancy.data/64.4453))} height={25+(100*(countryData.Health_life_expectancy.data/64.4453))/2} id=\"4\" fill=\"#D7DF21\" draggable onDragMove={displayCord} onDragEnd={checkIntersection}/>\r\n                        <RegularPolygon x={trianglePos.x} y={trianglePos.y} sides={3} radius={(100*(countryData.Percept_of_corrupt.data/0.73312))/2} id=\"5\" fill=\"#006990\" draggable onDragMove={displayCord} onDragEnd={checkIntersection}/>\r\n                        <RegularPolygon x={pentagonPos.x} y={pentagonPos.y} sides={6} radius={40-(100*(countryData.Generosity.data/-0.01457))/64} id=\"6\" fill=\"#FFB61B\" draggable onDragMove={displayCord} onDragEnd={checkIntersection}/>    \r\n                    </Layer>\r\n                    <Layer x={45} y={150} className={styles.stencilLayer}>\r\n                        <Text x={0} y={60} fontSize={26} fill=\"#006990\" fontFamily=\"Sniglet, cursive\" text=\"Happiest country's shapes\" />\r\n                        <Rect x={sqStencil.x} y={sqStencil.y} width={(100*(finland.Gdp_Per_Capita.data/9.295706))/2} height={(100*(finland.Gdp_Per_Capita.data/9.295706))/2} stroke=\"#9F388A\" strokeWidth={2}/>\r\n                        <Circle x={circStencil.x} y={circStencil.y} radius={(100*(finland.Freedom_of_choice.data/0.78336))/2} stroke=\"#9F388A\" strokeWidth={2}/>\r\n                        <Star x={starStencil.x} y={starStencil.y} numPoints={5} innerRadius={Math.min(20,10+(100*(finland.Soc_Support.data/0.808721))/2)} outerRadius={10+(100*(finland.Soc_Support.data/0.808721))/2} rotation={70} stroke=\"#9F388A\" strokeWidth={2} />\r\n                        <Rect  x={rectStencil.x} y={rectStencil.y} width={25+(100*(finland.Health_life_expectancy.data/64.4453))} height={25+(100*(finland.Health_life_expectancy.data/64.4453))/2} stroke=\"#9F388A\" strokeWidth={2} />\r\n                        <RegularPolygon x={triStencil.x} y={triStencil.y} sides={3} radius={(100*(finland.Percept_of_corrupt.data/0.73312))/2} stroke=\"#9F388A\" strokeWidth={2} />\r\n                        <RegularPolygon  x={pentStencil.x} y={pentStencil.y} sides={6} radius={40-(100*(finland.Generosity.data/-0.01457))/64} stroke=\"#9F388A\" strokeWidth={2} />        \r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stencil;","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Services\\country.js",[],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\HomePage\\index.js",["59","60"],"import React, {useEffect, useLayoutEffect, useState} from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\n//import components\r\nimport InfoPage from \"../InfoPage\";\r\nimport Stencil from \"../Stencil\";\r\nimport ContactMe from \"../ContactMe\";\r\n\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\n\r\nconst HomePage = () => {\r\n\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    \r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n          setWidth(window.innerWidth);\r\n          console.log(width);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n      }, []);\r\n\r\n    if(width >= 1024){\r\n        return (\r\n            <Container fluid className={styles.mainContainer}>\r\n                <Row className={styles.mainRow}>\r\n                    <Col sm={true} lg={3} className={styles.menuCol}>\r\n                        <div className={styles.heading}><h3>Finding happiness</h3></div>\r\n                        <h4 className={styles.infoHeader}>How to find it?</h4>\r\n                        <InfoPage />\r\n                        <ContactMe />\r\n                    </Col>\r\n                    <Col sm={true} lg={9} className={styles.stencilCol}>\r\n                        <div>\r\n                            <Stencil />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }else{\r\n        return (\r\n            <Container fluid className={styles.smallContainer}>\r\n                <div className={styles.smallMessage}>\r\n                    <h2>Sorry, your screen is a little bit small for this activity,\r\n                        please switch to a bigger screen! Thanks \r\n                    </h2>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\InfoPage\\index.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ContactMe\\index.js",["75","76","77"],"import React, {useEffect, useState} from \"react\";\r\n\r\n\r\n//import assets\r\nimport { mdiChevronRight, mdiChevronLeft, mdiClose } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport Avatar from \"../Assets/avatar-moiz.png\";\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\n\r\nconst ContactMe = () => {\r\n\r\n    const [showContactInfo, setContactInfoToggle] = useState(false);\r\n\r\n    function toggleContact(){\r\n        setContactInfoToggle(!showContactInfo);\r\n    }\r\n\r\n    function openTypeform(){\r\n        window.open(\"https://7a41iinx3kn.typeform.com/to/ZAB3OaNS\", \"_blank\");\r\n    }\r\n\r\n    return (\r\n        <div className={styles.contactPage}>\r\n            <div className={styles.contactBtn}>\r\n                <button className={styles.aboutBtn} onClick={toggleContact}>Who made this?</button>\r\n            </div>\r\n\r\n            <div className={`${styles.contactInfo} ${showContactInfo ? styles.show : styles.noShow}`}>\r\n                <button className={styles.closeInfo} onClick={toggleContact}><Icon path={mdiClose} className={styles.closeIcon}/></button>\r\n                <div className={styles.infoBox}>\r\n                    <div className={styles.avatarImg}>\r\n                        <img src={Avatar} alt=\"Avatar Img\"/>\r\n                    </div>\r\n                    <div className={styles.aboutMe}>\r\n                    <p> \r\n                        Well, My name is Moiz Ali and I just finish my studies at a University\r\n                        where I learned a lot about computers. So I thought of making activities\r\n                        like these based on what I learn at university and from internet and if \r\n                        you like this activity then let me know by clicking the button below Thanks!  </p>\r\n                    </div>\r\n                    <div className={styles.typeFormBtn}>\r\n                        <button onClick={openTypeform}>Let's do it!</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ContactMe;","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ShapesInfo\\index.js",["78","79","80","81","82","83","84"],"import React, { useState, useEffect } from \"react\";\r\n\r\n//import assets\r\nimport { mdiChevronRight, mdiChevronLeft, mdiClose } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport Square from \"../Assets/Shapes/Square.jpg\";\r\nimport Circle from \"../Assets/Shapes/Circle.jpg\";\r\nimport Star from \"../Assets/Shapes/Star.jpg\";\r\nimport Rectangle from \"../Assets/Shapes/Rectangle.jpg\";\r\nimport Triangle from \"../Assets/Shapes/Triangle.jpg\";\r\nimport Hexagon from \"../Assets/Shapes/Hexagon.jpg\";\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst ShapeInfo = () => {\r\n    const [showShapesInfo, setShapesInfoToggle] = useState(false);\r\n    const [shapeSlider, setCurrentShape] = useState([true, false, false, false, false, false]);\r\n\r\n    function toggleShapeInfo() {\r\n        setShapesInfoToggle(!showShapesInfo);\r\n    }\r\n\r\n    function toggleLeftShape(e){\r\n        console.log(e.target.id)\r\n        let newSlider = [...shapeSlider]\r\n        var index = parseInt(e.target.id)\r\n        newSlider[index] = false;\r\n        newSlider[index-1] = true; \r\n        setCurrentShape(newSlider);\r\n    }\r\n\r\n    function toggleRightShape(e){\r\n        console.log(e.target.id)\r\n        let newSlider = [...shapeSlider]\r\n        var index = parseInt(e.target.id)\r\n        newSlider[index] = false;\r\n        newSlider[index+1] = true;\r\n        setCurrentShape(newSlider);\r\n    }\r\n    return (\r\n        <div className={styles.shapeInfo}>\r\n            <div className={styles.shapeBtn}>\r\n                <button onClick={toggleShapeInfo}>About the Shapes</button>\r\n            </div>\r\n            <div className={`${styles.shapesInfo} ${showShapesInfo ? styles.show : styles.noShow}`}>\r\n                <button className={styles.closeInfo} onClick={toggleShapeInfo}><Icon path={mdiClose} className={styles.closeIcon}/></button>\r\n                <div className={styles.infoBox}>\r\n                    <div className={styles.ShapePage}>\r\n                        <div className={`${styles.shape} ${shapeSlider[0] ? styles.show : styles.noShow}`}>\r\n                            <h4 className={styles.shapeName}>Square</h4>\r\n                            <div className={styles.shapeDetails}>\r\n                                <div><img className={styles.shapeImg} src={Square} alt=\"Square image\"/></div>\r\n                                <div className={styles.shapeInfo}>\r\n                                    Square tells us that how much someone from that country will have to pay to \r\n                                    purchase a candy. <br/><br/> So... if the square is BIG then they have to pay less money\r\n                                    and if square is SMALL then they have to pay more money. \r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.shapeBtns}>\r\n                                <button className={styles.nextBtn} id=\"0\" onClick={toggleRightShape}>Circle <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.shape} ${shapeSlider[1] ? styles.show : styles.noShow}`}>\r\n                            <h4 className={styles.shapeName}>Circle</h4>\r\n                            <div className={styles.shapeDetails}>\r\n                                <div><img className={styles.shapeImg} src={Circle} alt=\"Circle image\"/></div>\r\n                                <div className={styles.shapeInfo}>\r\n                                    Circle tells us that how much the country allows it's people to choose any flavour \r\n                                    of the candy <br/><br/>So... if the circle is BIG then they allow you to choose any flavour\r\n                                    and if its SMALL then they do not allow you to choose any flavour.\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.shapeBtns}>\r\n                            <button className={styles.prevBtn} id=\"1\" onClick={toggleLeftShape}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Square </button>\r\n                                <button className={styles.nextBtn} id=\"1\" onClick={toggleRightShape}>Star <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.shape} ${shapeSlider[2] ? styles.show : styles.noShow}`}>\r\n                            <h4 className={styles.shapeName}>Star</h4>\r\n                            <div className={styles.shapeDetails}>\r\n                                <div><img className={styles.shapeImg} src={Star} alt=\"Star image\"/></div>\r\n                                <div className={styles.shapeInfo}>\r\n                                    Star tells us that how much people of the country help others if they run out of candies\r\n                                    <br/><br/> So... if the star is BIG that means more people help others and if the star is SMALL\r\n                                    then it means less people help each other.  \r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.shapeBtns}>\r\n                            <button className={styles.prevBtn} id=\"2\" onClick={toggleLeftShape}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Circle </button>\r\n                                <button className={styles.nextBtn} id=\"2\" onClick={toggleRightShape}>Rectangle <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.shape} ${shapeSlider[3] ? styles.show : styles.noShow}`}>\r\n                            <h4 className={styles.shapeName}>Rectangle</h4>\r\n                            <div className={styles.shapeDetails}>\r\n                                <div><img className={styles.shapeImg} src={Rectangle} alt=\"Rectangle image\"/></div>\r\n                                <div className={styles.shapeInfo}>\r\n                                    Rectangle tells us that how much people are healthy in this country that means they\r\n                                    don't eat a lot of candies! <br/><br/> So... if the Rectangle is BIG then many people are living a\r\n                                    healthy life and if the Rectangle is SMALL then less people are living a healthy life.\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.shapeBtns}>\r\n                            <button className={styles.prevBtn} id=\"3\" onClick={toggleLeftShape}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Star </button>\r\n                                <button className={styles.nextBtn} id=\"3\" onClick={toggleRightShape}>Triangle <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.shape} ${shapeSlider[4] ? styles.show : styles.noShow}`}>\r\n                            <h4 className={styles.shapeName}>Triangle</h4>\r\n                            <div className={styles.shapeDetails}>\r\n                                <div><img className={styles.shapeImg} src={Triangle} alt=\"Triangle image\"/></div>\r\n                                <div className={styles.shapeInfo}>\r\n                                   Triangle tells us that how much people cheat or steal candies if they can not get one <br/><br/>\r\n                                   So... if the Triangle is BIG then it means many people steal candies and if the Triangle is SMALL then \r\n                                   it means less people steal candies.\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.shapeBtns}>\r\n                            <button className={styles.prevBtn} id=\"4\" onClick={toggleLeftShape}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Rectangle </button>\r\n                                <button className={styles.nextBtn} id=\"4\" onClick={toggleRightShape}>Hexagon <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.shape} ${shapeSlider[5] ? styles.show : styles.noShow}`}>\r\n                            <h4 className={styles.shapeName}>Hexagon</h4>\r\n                            <div className={styles.shapeDetails}>\r\n                                <div><img className={styles.shapeImg} src={Hexagon} alt=\"Hexagon image\"/></div>\r\n                                <div className={styles.shapeInfo}>\r\n                                    Hexagon tells us that how much people donate candies to charity and to the people who cannot get one\r\n                                    <br/><br/> So... if the hexagon is BIG then many people donate candies to charities and if the hexagon is SMALL then\r\n                                    they less people donate candies to charities. \r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.shapeBtns}>\r\n                                <button className={styles.prevBtn} id=\"5\" onClick={toggleLeftShape}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Triangle </button>\r\n                                <button className={styles.goInfo} onClick={toggleShapeInfo}>Activity time!</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShapeInfo;",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":63,"column":21,"nodeType":"91","messageId":"92","endLine":63,"endColumn":23},{"ruleId":"89","severity":1,"message":"90","line":72,"column":26,"nodeType":"91","messageId":"92","endLine":72,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":81,"column":26,"nodeType":"91","messageId":"92","endLine":81,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":90,"column":26,"nodeType":"91","messageId":"92","endLine":90,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":99,"column":26,"nodeType":"91","messageId":"92","endLine":99,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":108,"column":26,"nodeType":"91","messageId":"92","endLine":108,"endColumn":28},{"ruleId":"89","severity":1,"message":"90","line":121,"column":21,"nodeType":"91","messageId":"92","endLine":121,"endColumn":23},{"ruleId":"89","severity":1,"message":"90","line":123,"column":27,"nodeType":"91","messageId":"92","endLine":123,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":125,"column":27,"nodeType":"91","messageId":"92","endLine":125,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":127,"column":27,"nodeType":"91","messageId":"92","endLine":127,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":129,"column":27,"nodeType":"91","messageId":"92","endLine":129,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":131,"column":27,"nodeType":"91","messageId":"92","endLine":131,"endColumn":29},{"ruleId":"89","severity":1,"message":"93","line":142,"column":21,"nodeType":"91","messageId":"92","endLine":142,"endColumn":23},{"ruleId":"94","severity":1,"message":"95","line":163,"column":8,"nodeType":"96","endLine":163,"endColumn":17,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":16,"nodeType":"100","messageId":"101","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"102","line":28,"column":10,"nodeType":"96","endLine":28,"endColumn":12,"suggestions":"103"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"104","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":15},{"ruleId":"105","severity":1,"message":"106","line":25,"column":36,"nodeType":"107","messageId":"108","endLine":25,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":27,"column":22,"nodeType":"91","messageId":"92","endLine":27,"endColumn":24},{"ruleId":"105","severity":1,"message":"106","line":39,"column":36,"nodeType":"107","messageId":"108","endLine":39,"endColumn":38},{"ruleId":"89","severity":1,"message":"90","line":41,"column":22,"nodeType":"91","messageId":"92","endLine":41,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":104,"column":38,"nodeType":"111","endLine":104,"endColumn":112},{"ruleId":"109","severity":1,"message":"110","line":113,"column":38,"nodeType":"111","endLine":113,"endColumn":111},{"ruleId":"109","severity":1,"message":"110","line":125,"column":37,"nodeType":"111","endLine":125,"endColumn":118},{"ruleId":"109","severity":1,"message":"110","line":136,"column":38,"nodeType":"111","endLine":136,"endColumn":120},{"ruleId":"109","severity":1,"message":"110","line":159,"column":65,"nodeType":"111","endLine":159,"endColumn":106},{"ruleId":"109","severity":1,"message":"110","line":172,"column":65,"nodeType":"111","endLine":172,"endColumn":107},{"ruleId":"112","severity":1,"message":"113","line":184,"column":93,"nodeType":"111","endLine":184,"endColumn":221},{"ruleId":"109","severity":1,"message":"110","line":187,"column":37,"nodeType":"111","endLine":187,"endColumn":80},{"ruleId":"98","severity":1,"message":"99","line":1,"column":16,"nodeType":"100","messageId":"101","endLine":1,"endColumn":25},{"ruleId":"98","severity":1,"message":"114","line":5,"column":10,"nodeType":"100","messageId":"101","endLine":5,"endColumn":25},{"ruleId":"98","severity":1,"message":"115","line":5,"column":27,"nodeType":"100","messageId":"101","endLine":5,"endColumn":41},{"ruleId":"98","severity":1,"message":"99","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"109","severity":1,"message":"110","line":53,"column":38,"nodeType":"111","endLine":53,"endColumn":104},{"ruleId":"109","severity":1,"message":"110","line":67,"column":38,"nodeType":"111","endLine":67,"endColumn":104},{"ruleId":"109","severity":1,"message":"110","line":82,"column":38,"nodeType":"111","endLine":82,"endColumn":100},{"ruleId":"109","severity":1,"message":"110","line":97,"column":38,"nodeType":"111","endLine":97,"endColumn":110},{"ruleId":"109","severity":1,"message":"110","line":112,"column":38,"nodeType":"111","endLine":112,"endColumn":108},{"ruleId":"109","severity":1,"message":"110","line":127,"column":38,"nodeType":"111","endLine":127,"endColumn":106},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'countryData'. Either include it or remove the dependency array.","ArrayExpression",["118"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","React Hook useLayoutEffect has a missing dependency: 'width'. Either include it or remove the dependency array.",["119"],"'Stencil' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'mdiChevronRight' is defined but never used.","'mdiChevronLeft' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [country, countryData]",{"range":"124","text":"125"},"Update the dependencies array to be: [width]",{"range":"126","text":"127"},[8354,8363],"[country, countryData]",[801,803],"[width]"]
[{"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\index.js":"1","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\App.js":"2","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\reportWebVitals.js":"3","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Stencil\\index.js":"4","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Services\\country.js":"5","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\HomePage\\index.js":"6","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\InfoPage\\index.js":"7","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ContactMe\\index.js":"8","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ShapesInfo\\index.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":228,"mtime":1614902880500,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":13064,"mtime":1616531327681,"results":"14","hashOfConfig":"11"},{"size":208,"mtime":1612990978196,"results":"15","hashOfConfig":"11"},{"size":2006,"mtime":1615152010359,"results":"16","hashOfConfig":"11"},{"size":13201,"mtime":1616535655087,"results":"17","hashOfConfig":"11"},{"size":2042,"mtime":1614902880560,"results":"18","hashOfConfig":"11"},{"size":11676,"mtime":1616536510063,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1egte4n",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\index.js",[],["43","44"],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\App.js",[],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\reportWebVitals.js",[],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Stencil\\index.js",["45","46","47","48","49","50","51","52","53","54","55","56","57","58"],"import React, { useState, useEffect } from \"react\";\r\nimport { getCountryData } from \"../Services/country\";\r\nimport ShapesInfo from \"../ShapesInfo\";\r\n\r\n//import assets\r\nimport { mdiChevronDown, mdiChevronUp } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport { Stage, Layer, Star, Rect, Circle, RegularPolygon, Text } from \"react-konva\";\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst Stencil = () => {\r\n    const countries = [\"Afghanistan\",\"Albania\",\"Algeria\",\"Argentina\",\"Armenia\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahrain\",\"Bangladesh\",\"Belarus\",\r\n    \"Belgium\",\"Benin\",\"Bolivia\",\"Bosnia and Herzegovina\",\"Botswana\",\"Brazil\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Central African Republic\",\r\n    \"Chad\",\"Chile\",\"China\",\"Colombia\",\"Comoros\",\"Congo (Brazzaville)\",\"Congo (Kinshasa)\",\"Costa Rica\",\"Croatia\",\"Cyprus\",\"Czech Republic\",\"Denmark\",\"Dominican Republic\",\r\n    \"Ecuador\",\"Egypt\",\"El Salvador\",\"Estonia\",\"Ethiopia\",\"Finland\",\"France\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Greece\",\"Guatemala\",\"Guinea\",\"Haiti\",\"Honduras\",\r\n    \"Hong Kong S.A.R. of China\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Israel\",\"Italy\",\"Ivory Coast\",\"Jamaica\",\"Japan\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\r\n    \"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Lithuania\",\"Luxembourg\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\r\n    \"Malta\",\"Mauritania\",\"Mauritius\",\"Mexico\",\"Moldova\",\"Mongolia\",\"Montenegro\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nepal\",\"Netherlands\",\"New Zealand\",\"Nicaragua\",\"Niger\",\r\n    \"Nigeria\",\"North Cyprus\",\"Norway\",\"Pakistan\",\"Palestinian Territories\",\"Panama\",\"Paraguay\",\"Peru\",\"Philippines\",\"Poland\",\"Portugal\",\"Romania\",\"Russia\",\"Rwanda\",\"Saudi Arabia\",\r\n    \"Senegal\",\"Serbia\",\"Sierra Leone\",\"Singapore\",\"Slovakia\",\"Slovenia\",\"South Africa\",\"South Korea\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"Swaziland\",\"Sweden\",\"Switzerland\",\r\n    \"Taiwan Province of China\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Togo\",\"Trinidad and Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\r\n    \"United Kingdom\",\"United States\",\"Uruguay\",\"Uzbekistan\",\"Venezuela\",\"Vietnam\",\"Yemen\",\"Zambia\",\"Zimbabwe\"]\r\n    \r\n    const [country, setCountry] = useState('Select a country');\r\n    const [shapeId, setShapeID] = useState(0)\r\n    const [display, setListDisplay] = useState(false);\r\n    const [countryData, setCountryData] = useState({\"Rank\":{\"data\":1},\"CountryName\":{\"data\":\"Finland\"},\"Region\":{\"data\":\"Western Europe\"},\"Score\":{\"data\":7.808700085},\"Gdp_Per_Capita\":{\"data\":10.63926697},\"Soc_Support\":{\"data\":0.954329729},\"Health_life_expectancy\":{\"data\":71.9008255},\"Freedom_of_choice\":{\"data\":0.949172199},\"Generosity\":{\"data\":-0.059482019},\"Percept_of_corrupt\":{\"data\":0.195444584}});\r\n    \r\n    //shapes state\r\n    const [squarePos, setSqPosition] = useState({x: 45, y:90})\r\n    const [circlePos, setCircPosition] = useState({x: 225, y:110})\r\n    const [starPos, setStarPosition] = useState({x: 375, y:120})\r\n    const [rectanglePos, setRectPosition] = useState({x: 475, y:90})\r\n    const [trianglePos, setTriPosition] = useState({x: 690, y:130})\r\n    const [pentagonPos, setPentPosition] = useState({x: 825, y:130})\r\n\r\n\r\n    //stencil sizes and position\r\n    var finland = {\"Rank\":{\"data\":1},\"CountryName\":{\"data\":\"Finland\"},\"Region\":{\"data\":\"Western Europe\"},\"Score\":{\"data\":7.808700085},\"Gdp_Per_Capita\":{\"data\":10.63926697},\"Soc_Support\":{\"data\":0.954329729},\"Health_life_expectancy\":{\"data\":71.9008255},\"Freedom_of_choice\":{\"data\":0.949172199},\"Generosity\":{\"data\":-0.059482019},\"Percept_of_corrupt\":{\"data\":0.195444584}}\r\n    var sqStencil = {x:30, y:120}\r\n    var circStencil = {x:400, y:150}\r\n    var starStencil = {x:800, y:150}\r\n    var rectStencil = {x:30, y:330}\r\n    var triStencil = {x:400, y:380}\r\n    var pentStencil = {x:800, y:360}\r\n    \r\n    \r\n    function toggleList(){\r\n        setListDisplay(!display);\r\n    }    \r\n\r\n    function changeCountry(e){\r\n        setCountry(e.target.innerHTML);\r\n        setListDisplay(!display);\r\n        console.log(e.target.innerHTML);\r\n    }\r\n\r\n    function checkIntersection(e){\r\n        console.log(\"checking intersection\");\r\n        var shape = e.target.attrs;\r\n        var layerX = 45\r\n        var layerY = 150\r\n        if(shape.id == 1){\r\n            console.log(\"shape: square\");\r\n            if(shape.x <= 280 && shape.x >= 10 && shape.y <= 350 && shape.y >= 200){\r\n                console.log(\"collision course!\");\r\n                setSqPosition({x:sqStencil.x + layerX, y:sqStencil.y + layerY});\r\n            }else{\r\n                setSqPosition({x: 45, y:90});\r\n            }\r\n        }\r\n        else if(shape.id == 2){\r\n            console.log(\"shape: circle\");\r\n            if(shape.x <= 545 && shape.x >= 350 && shape.y <= 380 && shape.y >= 220){\r\n                console.log(\"collision course!\");\r\n                setCircPosition({x:circStencil.x + layerX, y:circStencil.y + layerY});\r\n            }else{\r\n                setCircPosition({x: 225, y:110});\r\n            }\r\n        }\r\n        else if(shape.id == 3){\r\n            console.log(\"shape: star\");\r\n            if(shape.x <= 900 && shape.x >= 780 && shape.y <= 360 && shape.y >= 190){\r\n                console.log(\"collision course!\");\r\n                setStarPosition({x:starStencil.x + layerX, y:starStencil.y + layerY});\r\n            }else{\r\n                setStarPosition({x: 375, y:120});\r\n            }\r\n        }\r\n        else if(shape.id == 4){\r\n            console.log(\"shape: Rectangle\");\r\n            if(shape.x <= 150 && shape.x >= 0 && shape.y <= 540 && shape.y >= 420){\r\n                console.log(\"collision course!\");\r\n                setRectPosition({x:rectStencil.x + layerX, y:rectStencil.y + layerY});\r\n            }else{\r\n                setRectPosition({x: 475, y:90});\r\n            }\r\n        }\r\n        else if(shape.id == 5){\r\n            console.log(\"shape: Triangle\");\r\n            if(shape.x <= 490 && shape.x >= 400 && shape.y <= 590 && shape.y >= 480){\r\n                console.log(\"collision course!\");\r\n                setTriPosition({x:triStencil.x + layerX, y:triStencil.y + layerY});\r\n            }else{\r\n                setTriPosition({x: 690, y:130});\r\n            }\r\n        }\r\n        else if(shape.id == 6){\r\n            console.log(\"shape: Pentagon\");\r\n            if(shape.x <= 900 && shape.x >= 800 && shape.y <= 580 && shape.y >= 460){\r\n                console.log(\"collision course!\");\r\n                setPentPosition({x:pentStencil.x + layerX, y:pentStencil.y + layerY});\r\n            }else{\r\n                setPentPosition({x: 825, y:130});\r\n            }\r\n        }\r\n    }\r\n\r\n    function showInfo(e){\r\n        var shape = e.target.attrs;\r\n        setShapeID(shape.id)\r\n        console.log(shape.id)\r\n    }\r\n\r\n    function displayCord(e){\r\n        var shape = e.target.attrs;\r\n        if(shape.id == 1){\r\n            setSqPosition({x:0, y:0});\r\n        }else if(shape.id == 2){\r\n            setCircPosition({x:0, y:0});\r\n        }else if(shape.id == 3){\r\n            setStarPosition({x:0, y:0});\r\n        }else if(shape.id == 4){\r\n            setRectPosition({x:0, y:0});\r\n        }else if(shape.id == 5){\r\n            setTriPosition({x:0, y:0});\r\n        }else if(shape.id == 6){\r\n            setPentPosition({x:0, y:0});\r\n        }\r\n        console.log(`X: ${Math.round(e.target.attrs.x)} Y: ${Math.round(e.target.attrs.y)}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n         // GET request using fetch inside useEffect React hook\r\n         console.log(country)\r\n         console.log(\"Country data change in effect..\")\r\n\r\n         if(country != \"Select a country\"){\r\n            let mounted = true;\r\n            getCountryData(country)\r\n            .then(data => {\r\n                if(mounted) {\r\n                    setCountryData(data)\r\n                    setSqPosition({x:45, y:90});\r\n                    setCircPosition({x: 225, y:110});\r\n                    setStarPosition({x: 375, y:120});\r\n                    setRectPosition({x: 475, y:90});\r\n                    setTriPosition({x: 690, y:130});\r\n                    setPentPosition({x: 825, y:130});\r\n                }\r\n            })\r\n            if(countryData != null){\r\n                console.log(countryData)\r\n            }\r\n            return () => mounted = false;\r\n        }\r\n\r\n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\r\n    }, [country]);\r\n    \r\n    return (\r\n        <div className={styles.mainArea}>\r\n           <div className={styles.infoDivs}> \r\n                <div className={styles.dropDown}>\r\n                    <button className={styles.dropDownBtn} onClick={toggleList}>{country} {display ? <Icon path={mdiChevronUp} size=\"35px\" className={styles.selectIcon}/> : <Icon path={mdiChevronDown} size=\"35px\" className={styles.selectIcon}/>}</button>\r\n                    <div className={styles.dropDownContent} style={{ display: display ? \"flex\" : \"none\" }}>\r\n                        <ul>\r\n                            {countries.map((item)=>\r\n                                <li className={styles.countryLabel} onClick={changeCountry}>{item}</li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <ShapesInfo id={shapeId}/>\r\n            </div>\r\n            <div className={styles.shapeStage}>\r\n                <Stage width={1000} height={700} margin={50}>\r\n                    <Layer className={styles.shapeLayer}>\r\n                        <Text x={45} y={20} fontSize={26} fill=\"#006990\" fontFamily=\"Sniglet, cursive\" text={`${countryData.CountryName.data}'s Shapes`} />\r\n                        <Rect x={squarePos.x} y={squarePos.y} width={(100*(countryData.Gdp_Per_Capita.data/9.295706))/2} height={(100*(countryData.Gdp_Per_Capita.data/9.295706))/2} id=\"1\" fill=\"#D7DF21\" draggable onDragMove={displayCord} onDragEnd={checkIntersection} onMouseOver={showInfo}/>\r\n                        <Circle x={circlePos.x} y={circlePos.y} radius={(100*(countryData.Freedom_of_choice.data/0.78336))/2} id=\"2\" fill=\"#006990\" draggable onDragMove={displayCord} onDragEnd={checkIntersection} onMouseOver={showInfo}/>\r\n                        <Star x={starPos.x} y={starPos.y} numPoints={5} innerRadius={Math.min(20,10+(100*(countryData.Soc_Support.data/0.808721))/2)} outerRadius={10+(100*(countryData.Soc_Support.data/0.808721))/2} rotation={70} id=\"3\" fill=\"#FFB61B\" draggable onDragMove={displayCord} onDragEnd={checkIntersection} onMouseOver={showInfo}/>\r\n                        <Rect x={rectanglePos.x} y={rectanglePos.y} width={25+(100*(countryData.Health_life_expectancy.data/64.4453))} height={25+(100*(countryData.Health_life_expectancy.data/64.4453))/2} id=\"4\" fill=\"#D7DF21\" draggable onDragMove={displayCord} onDragEnd={checkIntersection} onMouseOver={showInfo}/>\r\n                        <RegularPolygon x={trianglePos.x} y={trianglePos.y} sides={3} radius={(100*(countryData.Percept_of_corrupt.data/0.73312))/2} id=\"5\" fill=\"#006990\" draggable onDragMove={displayCord} onDragEnd={checkIntersection} onMouseOver={showInfo}/>\r\n                        <RegularPolygon x={pentagonPos.x} y={pentagonPos.y} sides={6} radius={40-(100*(countryData.Generosity.data/-0.01457))/64} id=\"6\" fill=\"#FFB61B\" draggable onDragMove={displayCord} onDragEnd={checkIntersection} onMouseOver={showInfo}/>    \r\n                    </Layer>\r\n                    <Layer x={45} y={150} className={styles.stencilLayer}>\r\n                        <Text x={0} y={60} fontSize={26} fill=\"#006990\" fontFamily=\"Sniglet, cursive\" text=\"Happiest country's shapes\" />\r\n                        <Rect x={sqStencil.x} y={sqStencil.y} width={(100*(finland.Gdp_Per_Capita.data/9.295706))/2} height={(100*(finland.Gdp_Per_Capita.data/9.295706))/2} stroke=\"#9F388A\" strokeWidth={2}/>\r\n                        <Circle x={circStencil.x} y={circStencil.y} radius={(100*(finland.Freedom_of_choice.data/0.78336))/2} stroke=\"#9F388A\" strokeWidth={2}/>\r\n                        <Star x={starStencil.x} y={starStencil.y} numPoints={5} innerRadius={Math.min(20,10+(100*(finland.Soc_Support.data/0.808721))/2)} outerRadius={10+(100*(finland.Soc_Support.data/0.808721))/2} rotation={70} stroke=\"#9F388A\" strokeWidth={2} />\r\n                        <Rect  x={rectStencil.x} y={rectStencil.y} width={25+(100*(finland.Health_life_expectancy.data/64.4453))} height={25+(100*(finland.Health_life_expectancy.data/64.4453))/2} stroke=\"#9F388A\" strokeWidth={2} />\r\n                        <RegularPolygon x={triStencil.x} y={triStencil.y} sides={3} radius={(100*(finland.Percept_of_corrupt.data/0.73312))/2} stroke=\"#9F388A\" strokeWidth={2} />\r\n                        <RegularPolygon  x={pentStencil.x} y={pentStencil.y} sides={6} radius={40-(100*(finland.Generosity.data/-0.01457))/64} stroke=\"#9F388A\" strokeWidth={2} />        \r\n                    </Layer>\r\n                </Stage>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stencil;","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\Services\\country.js",[],"C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\HomePage\\index.js",["59","60"],"import React, {useEffect, useLayoutEffect, useState} from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\n//import components\r\nimport InfoPage from \"../InfoPage\";\r\nimport Stencil from \"../Stencil\";\r\nimport ContactMe from \"../ContactMe\";\r\n\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\n\r\nconst HomePage = () => {\r\n\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    \r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n          setWidth(window.innerWidth);\r\n          console.log(width);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n      }, []);\r\n\r\n    if(width >= 1024){\r\n        return (\r\n            <Container fluid className={styles.mainContainer}>\r\n                <Row className={styles.mainRow}>\r\n                    <Col sm={true} lg={3} className={styles.menuCol}>\r\n                        <div className={styles.heading}><h3>Finding happiness</h3></div>\r\n                        <h4 className={styles.infoHeader}>How to find it?</h4>\r\n                        <InfoPage />\r\n                        <ContactMe />\r\n                    </Col>\r\n                    <Col sm={true} lg={9} className={styles.stencilCol}>\r\n                        <div>\r\n                            <Stencil />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }else{\r\n        return (\r\n            <Container fluid className={styles.smallContainer}>\r\n                <div className={styles.smallMessage}>\r\n                    <h2>Sorry, your screen is a little bit small for this activity,\r\n                        please switch to a bigger screen! Thanks \r\n                    </h2>\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default HomePage;","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\InfoPage\\index.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75"],"import React, { useState, useEffect } from \"react\";\r\nimport Stencil from \"../Stencil\";\r\n\r\n//import assets\r\nimport { mdiChevronRight, mdiChevronLeft, mdiClose } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport stepOne from \"../Assets/Steps/gif1.gif\";\r\nimport stepTwo from \"../Assets/Steps/gif2.gif\";\r\nimport stepThree from \"../Assets/Steps/gif3.gif\";\r\nimport stepFour from \"../Assets/Steps/gif4.gif\";\r\nimport stepFive from \"../Assets/Steps/gif5.gif\";\r\n\r\n\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst InfoPage = () => {\r\n    const [showKidsInfo, setKidsInfoToggle] = useState(true);\r\n    const [showNotKidsInfo, setNotKidsInfoToggle] = useState(false);\r\n    const [taskSlider, setCurrentTask] = useState([true, false, false, false]);\r\n    const [infoSlider, setCurrentInfo] = useState([true, false, false]);\r\n\r\n    function toggleKidsInfo(){\r\n        setKidsInfoToggle(!showKidsInfo);\r\n        let newSlider = [...taskSlider];\r\n        newSlider.map((item,index) =>{\r\n            console.log(\"setting the initial state\");\r\n            if(index == 0){\r\n                newSlider[index] = true;\r\n            }else{\r\n                newSlider[index] = false;\r\n            }\r\n        })\r\n        setCurrentTask(newSlider);\r\n    }\r\n\r\n    function toggleNotKidsInfo(){\r\n        setNotKidsInfoToggle(!showNotKidsInfo);\r\n        let newSlider = [...infoSlider];\r\n        newSlider.map((item,index) =>{\r\n            console.log(\"setting the initial state\");\r\n            if(index == 0){\r\n                newSlider[index] = true;\r\n            }else{\r\n                newSlider[index] = false;\r\n            }\r\n        })\r\n        setCurrentInfo(newSlider);\r\n    }\r\n\r\n    function toggleLeftSlide(e){\r\n        console.log(e.target.id)\r\n        let newSlider = [...taskSlider]\r\n        var index = parseInt(e.target.id)\r\n        newSlider[index] = false;\r\n        newSlider[index-1] = true; \r\n        setCurrentTask(newSlider);\r\n    }\r\n\r\n    function toggleRightSlide(e){\r\n        console.log(e.target.id)\r\n        let newSlider = [...taskSlider]\r\n        var index = parseInt(e.target.id)\r\n        newSlider[index] = false;\r\n        newSlider[index+1] = true;\r\n        setCurrentTask(newSlider)\r\n    }\r\n\r\n    function toggleInfoLeftSlide(e){\r\n        console.log(e.target.id)\r\n        let newSlider = [...infoSlider]\r\n        var index = parseInt(e.target.id)\r\n        newSlider[index] = false;\r\n        newSlider[index-1] = true; \r\n        setCurrentInfo(newSlider);\r\n    }\r\n\r\n    function toggleInfoRightSlide(e){\r\n        console.log(e.target.id)\r\n        let newSlider = [...infoSlider]\r\n        var index = parseInt(e.target.id)\r\n        newSlider[index] = false;\r\n        newSlider[index+1] = true;\r\n        setCurrentInfo(newSlider)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.main}>\r\n            <div className={styles.infoButtons}>\r\n                <div className={styles.kids}>\r\n                    <button onClick={toggleKidsInfo}>Tips For Kids</button>\r\n                </div>\r\n                <div className={styles.notKids}>\r\n                    <button onClick={toggleNotKidsInfo}>Tips for not so Kids</button>\r\n                </div>\r\n            </div>\r\n            <div className={`${styles.kidsInfo} ${showKidsInfo ? styles.show : styles.noShow}`}>\r\n                <button className={styles.closeInfo} onClick={toggleKidsInfo}><Icon path={mdiClose} className={styles.closeIcon}/></button>\r\n                <div className={styles.infoBox}>\r\n                    <div className={styles.KidsPage}>\r\n                        <h3 className={styles.tipsHeading}>Okay, so what to do?</h3>\r\n                        <div className={`${styles.task} ${taskSlider[0] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.taskDetails}>\r\n                                <div><img className={styles.taskImg} src={stepFive} alt=\"select country image\"/></div>\r\n                                <div className={styles.taskInfo}>Hi there, So glad to see you here learning more about happiness\r\n                                just follow the steps ahead and you will quickly get through on how to do it! Hope you like it.</div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.nextBtn} id=\"0\" onClick={toggleRightSlide}>Go to next step <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.task} ${taskSlider[1] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.taskDetails}>\r\n                                <div><img className={styles.taskImg} src={stepOne} alt=\"select country image\"/></div>\r\n                                <div className={styles.taskInfo}>1. Select the country from the list at the top corner.</div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.prevBtn} id=\"1\" onClick={toggleLeftSlide}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Go to previous step </button>\r\n                                <button className={styles.nextBtn} id=\"1\" onClick={toggleRightSlide}>Go to next step <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.task} ${taskSlider[2] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.taskDetails}>\r\n                                <div><img className={styles.taskImg} src={stepTwo} alt=\"Drag and drop image\"/></div>\r\n                                <div className={styles.taskInfo}>2. Click the shapes below and drag them to their similar holes.</div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.prevBtn} id=\"2\" onClick={toggleLeftSlide}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Go to previous step </button>\r\n                                <button className={styles.nextBtn} id=\"2\" onClick={toggleRightSlide}>Go to next step <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.task} ${taskSlider[3] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.taskDetails}>\r\n                                <div><img className={styles.taskImg} src={stepThree} alt=\"changing shape size image\"/></div>\r\n                                <div className={styles.taskInfo}>3. It's a magical stencil and it will fit any size of the shape! <br/>\r\n                                 Wonder why each shape is of different size for every country?? (Next step tells that) </div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.prevBtn} id=\"3\" onClick={toggleLeftSlide}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Go to previous step </button>\r\n                                <button className={styles.nextBtn} id=\"3\" onClick={toggleRightSlide}>Go to next step <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.task} ${taskSlider[4] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.taskDetails}>\r\n                                <div><img className={styles.taskImg} src={stepFour} alt=\"pointing to the shape image\"/></div>\r\n                                <div className={styles.taskInfo}>4. Hover over each shape to know what it tells us!</div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.prevBtn} id=\"4\" onClick={toggleLeftSlide}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Go to previous step </button>\r\n                                <button className={styles.goInfo} onClick={toggleKidsInfo}>Eazy Peezy!!</button>\r\n                            </div>\r\n                        </div> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`${styles.notKidsInfo} ${showNotKidsInfo ? styles.show : styles.noShow}`}>\r\n            <button className={styles.closeInfo} onClick={toggleNotKidsInfo}><Icon path={mdiClose} className={styles.closeIcon}/></button>\r\n                <div className={styles.infoBox}>\r\n                    <div className={styles.notKidsPage}>\r\n                        <h3 className={styles.tipsHeading}>So, what's this activity is about?</h3>\r\n                        <div className={`${styles.info} ${infoSlider[0] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.infoDetails}>\r\n                                <div className={styles.infoText}>\r\n                                    Kids are supposed to select a country from the list and then drag them to its\r\n                                    corresponding hole in the stencil below. What's interesting here is the hole \r\n                                    size is the size of the happiest country in the world \"Finland\", so it basically \r\n                                    goes to shows that how a certain country is lacking/gaining in a category.\r\n                                </div>\r\n                                <div className={styles.infoImg}><img src={stepOne} alt=\"stencil1 image\"/></div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.nextBtn} id=\"0\" onClick={toggleInfoRightSlide}>Go to next step <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.info} ${infoSlider[1] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.infoDetails}>\r\n                                <div className={styles.infoText}>\r\n                                    Each shape represents a category on which the happiness score is measured, Circle:\r\n                                    Gdp Per Capita, Rectangle: Social Support, Triangle: Generosity, Square: Percept of\r\n                                    corrupt, Pentagon: Freedom of choice, Star: Healthy life expectancy.\r\n                                </div>\r\n                                <div className={styles.infoImg}><img src={stepFour} alt=\"stencil2 image\"/></div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.prevBtn} id=\"1\" onClick={toggleInfoLeftSlide}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Go to previous step </button>\r\n                                <button className={styles.nextBtn} id=\"1\" onClick={toggleInfoRightSlide}>Go to next step <Icon path={mdiChevronRight} className={styles.toggleIcon}/></button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`${styles.info} ${infoSlider[2] ? styles.show : styles.noShow}`}>\r\n                            <div className={styles.infoDetails}>\r\n                                <div className={styles.infoText}>\r\n                                    So a shape with smaller than the standard size will mean that country needs to improve that category where as for any size bigger than\r\n                                    standard will not require adjustment(except percept of corruption). Just to simply tell them what is required  \r\n                                    to make their country a little bit happier. Click <span><a target=\"_blank\" href=\"https://mapirani-96.medium.com/finding-happiness-analysis-of-world-happiness-report-2020-cad1f5b59987\"> here </a></span> to know more about it.\r\n                                </div>\r\n                                <div className={styles.infoImg}>\r\n                                    <img src={stepThree} alt=\"stencil3 image\"/>\r\n                                </div>\r\n                            </div>\r\n                            <div className={styles.slideBtns}>\r\n                                <button className={styles.prevBtn} id=\"2\" onClick={toggleInfoLeftSlide}><Icon path={mdiChevronLeft} className={styles.toggleLeftIcon}/>Go to previous step </button>\r\n                                <button className={styles.goInfo} onClick={toggleNotKidsInfo}>Activity time!</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoPage;","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ContactMe\\index.js",["76","77","78"],"import React, {useEffect, useState} from \"react\";\r\n\r\n\r\n//import assets\r\nimport { mdiChevronRight, mdiChevronLeft, mdiClose } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport Avatar from \"../Assets/avatar-moiz.png\";\r\n\r\n//import styles\r\nimport styles from \"./styles.module.scss\";\r\n\r\n\r\nconst ContactMe = () => {\r\n\r\n    const [showContactInfo, setContactInfoToggle] = useState(false);\r\n\r\n    function toggleContact(){\r\n        setContactInfoToggle(!showContactInfo);\r\n    }\r\n\r\n    function openTypeform(){\r\n        window.open(\"https://7a41iinx3kn.typeform.com/to/ZAB3OaNS\", \"_blank\");\r\n    }\r\n\r\n    return (\r\n        <div className={styles.contactPage}>\r\n            <div className={styles.contactBtn}>\r\n                <button className={styles.aboutBtn} onClick={toggleContact}>Who made this?</button>\r\n            </div>\r\n\r\n            <div className={`${styles.contactInfo} ${showContactInfo ? styles.show : styles.noShow}`}>\r\n                <button className={styles.closeInfo} onClick={toggleContact}><Icon path={mdiClose} className={styles.closeIcon}/></button>\r\n                <div className={styles.infoBox}>\r\n                    <div className={styles.avatarImg}>\r\n                        <img src={Avatar} alt=\"Avatar Img\"/>\r\n                    </div>\r\n                    <div className={styles.aboutMe}>\r\n                    <p> \r\n                        Well, My name is Moiz Ali and I just finish my studies at a University\r\n                        where I learned a lot about computers. So I thought of making activities\r\n                        like these based on what I learn at university and from internet and if \r\n                        you like this activity then let me know by clicking the button below Thanks!  </p>\r\n                    </div>\r\n                    <div className={styles.typeFormBtn}>\r\n                        <button onClick={openTypeform}>Let's do it!</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ContactMe;","C:\\Users\\Moiz\\Desktop\\Experiments 2.0\\HappinessProj\\frontend\\happ-project\\src\\ShapesInfo\\index.js",["79","80","81","82","83","84","85","86","87"],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":65,"column":21,"nodeType":"94","messageId":"95","endLine":65,"endColumn":23},{"ruleId":"92","severity":1,"message":"93","line":74,"column":26,"nodeType":"94","messageId":"95","endLine":74,"endColumn":28},{"ruleId":"92","severity":1,"message":"93","line":83,"column":26,"nodeType":"94","messageId":"95","endLine":83,"endColumn":28},{"ruleId":"92","severity":1,"message":"93","line":92,"column":26,"nodeType":"94","messageId":"95","endLine":92,"endColumn":28},{"ruleId":"92","severity":1,"message":"93","line":101,"column":26,"nodeType":"94","messageId":"95","endLine":101,"endColumn":28},{"ruleId":"92","severity":1,"message":"93","line":110,"column":26,"nodeType":"94","messageId":"95","endLine":110,"endColumn":28},{"ruleId":"92","severity":1,"message":"93","line":129,"column":21,"nodeType":"94","messageId":"95","endLine":129,"endColumn":23},{"ruleId":"92","severity":1,"message":"93","line":131,"column":27,"nodeType":"94","messageId":"95","endLine":131,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":133,"column":27,"nodeType":"94","messageId":"95","endLine":133,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":135,"column":27,"nodeType":"94","messageId":"95","endLine":135,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":137,"column":27,"nodeType":"94","messageId":"95","endLine":137,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":139,"column":27,"nodeType":"94","messageId":"95","endLine":139,"endColumn":29},{"ruleId":"92","severity":1,"message":"96","line":150,"column":21,"nodeType":"94","messageId":"95","endLine":150,"endColumn":23},{"ruleId":"97","severity":1,"message":"98","line":171,"column":8,"nodeType":"99","endLine":171,"endColumn":17,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":16,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"105","line":28,"column":10,"nodeType":"99","endLine":28,"endColumn":12,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":36},{"ruleId":"101","severity":1,"message":"107","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":15},{"ruleId":"108","severity":1,"message":"109","line":27,"column":36,"nodeType":"110","messageId":"111","endLine":27,"endColumn":38},{"ruleId":"92","severity":1,"message":"93","line":29,"column":22,"nodeType":"94","messageId":"95","endLine":29,"endColumn":24},{"ruleId":"108","severity":1,"message":"109","line":41,"column":36,"nodeType":"110","messageId":"111","endLine":41,"endColumn":38},{"ruleId":"92","severity":1,"message":"93","line":43,"column":22,"nodeType":"94","messageId":"95","endLine":43,"endColumn":24},{"ruleId":"112","severity":1,"message":"113","line":105,"column":38,"nodeType":"114","endLine":105,"endColumn":113},{"ruleId":"112","severity":1,"message":"113","line":115,"column":38,"nodeType":"114","endLine":115,"endColumn":112},{"ruleId":"112","severity":1,"message":"113","line":125,"column":38,"nodeType":"114","endLine":125,"endColumn":111},{"ruleId":"112","severity":1,"message":"113","line":135,"column":38,"nodeType":"114","endLine":135,"endColumn":119},{"ruleId":"112","severity":1,"message":"113","line":146,"column":38,"nodeType":"114","endLine":146,"endColumn":120},{"ruleId":"112","severity":1,"message":"113","line":170,"column":65,"nodeType":"114","endLine":170,"endColumn":106},{"ruleId":"112","severity":1,"message":"113","line":183,"column":65,"nodeType":"114","endLine":183,"endColumn":107},{"ruleId":"115","severity":1,"message":"116","line":195,"column":93,"nodeType":"114","endLine":195,"endColumn":221},{"ruleId":"112","severity":1,"message":"113","line":198,"column":37,"nodeType":"114","endLine":198,"endColumn":80},{"ruleId":"101","severity":1,"message":"102","line":1,"column":16,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"117","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":25},{"ruleId":"101","severity":1,"message":"118","line":5,"column":27,"nodeType":"103","messageId":"104","endLine":5,"endColumn":41},{"ruleId":"101","severity":1,"message":"119","line":1,"column":17,"nodeType":"103","messageId":"104","endLine":1,"endColumn":25},{"ruleId":"101","severity":1,"message":"102","line":1,"column":27,"nodeType":"103","messageId":"104","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"93","line":7,"column":17,"nodeType":"94","messageId":"95","endLine":7,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":14,"column":22,"nodeType":"94","messageId":"95","endLine":14,"endColumn":24},{"ruleId":"92","severity":1,"message":"93","line":23,"column":22,"nodeType":"94","messageId":"95","endLine":23,"endColumn":24},{"ruleId":"92","severity":1,"message":"93","line":32,"column":22,"nodeType":"94","messageId":"95","endLine":32,"endColumn":24},{"ruleId":"92","severity":1,"message":"93","line":41,"column":22,"nodeType":"94","messageId":"95","endLine":41,"endColumn":24},{"ruleId":"92","severity":1,"message":"93","line":50,"column":22,"nodeType":"94","messageId":"95","endLine":50,"endColumn":24},{"ruleId":"92","severity":1,"message":"93","line":59,"column":22,"nodeType":"94","messageId":"95","endLine":59,"endColumn":24},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'countryData'. Either include it or remove the dependency array.","ArrayExpression",["122"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","React Hook useLayoutEffect has a missing dependency: 'width'. Either include it or remove the dependency array.",["123"],"'Stencil' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'mdiChevronRight' is defined but never used.","'mdiChevronLeft' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},"Update the dependencies array to be: [country, countryData]",{"range":"128","text":"129"},"Update the dependencies array to be: [width]",{"range":"130","text":"131"},[8502,8511],"[country, countryData]",[801,803],"[width]"]